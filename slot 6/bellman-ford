class Graph:
    def __init__(self, vertices):
        self.M = vertices   
        self.graph = []    

    def add_edge(self, u, v, weight):
        self.graph.append([u, v, weight])

    def print_solution(self, distance, end):
        print("Do dai duong di ngan nhat la:", distance[end])



    def bellman_ford(self, src, end):
        distance = [float("Inf")] * self.M
        distance[src] = 0

        for _ in range(self.M - 1):
            for u, v, weight in self.graph:
                if distance[u] != float("Inf") and distance[u] + weight < distance[v]:
                    distance[v] = distance[u] + weight

        self.print_solution(distance, end)



g = Graph(5)
g.add_edge(0, 1, 2)
g.add_edge(0, 2, 4)
g.add_edge(1, 3, 2)
g.add_edge(2, 4, 3)
g.add_edge(2, 3, 4)
g.add_edge(4, 3, -5)

end = 4
g.bellman_ford(0, end)